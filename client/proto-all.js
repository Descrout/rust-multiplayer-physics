'use strict'; // code generated by pbf v3.2.1

// Entity ========================================

var Entity = self.Entity = {};

Entity.read = function (pbf, end) {
    return pbf.readFields(Entity._readField, {id: 0, x: 0, y: 0, pressed: false, color: ""}, end);
};
Entity._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.x = pbf.readFloat();
    else if (tag === 3) obj.y = pbf.readFloat();
    else if (tag === 4) obj.pressed = pbf.readBoolean();
    else if (tag === 5) obj.color = pbf.readString();
};
Entity.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.x) pbf.writeFloatField(2, obj.x);
    if (obj.y) pbf.writeFloatField(3, obj.y);
    if (obj.pressed) pbf.writeBooleanField(4, obj.pressed);
    if (obj.color) pbf.writeStringField(5, obj.color);
};

// Body ========================================

var Body = self.Body = {};

Body.read = function (pbf, end) {
    return pbf.readFields(Body._readField, {id: 0, color: "", x: 0, y: 0, w: 0, h: 0, rotation: 0}, end);
};
Body._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 2) obj.color = pbf.readString();
    else if (tag === 3) obj.x = pbf.readFloat();
    else if (tag === 4) obj.y = pbf.readFloat();
    else if (tag === 5) obj.w = pbf.readFloat();
    else if (tag === 6) obj.h = pbf.readFloat();
    else if (tag === 7) obj.rotation = pbf.readFloat();
};
Body.write = function (obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.color) pbf.writeStringField(2, obj.color);
    if (obj.x) pbf.writeFloatField(3, obj.x);
    if (obj.y) pbf.writeFloatField(4, obj.y);
    if (obj.w) pbf.writeFloatField(5, obj.w);
    if (obj.h) pbf.writeFloatField(6, obj.h);
    if (obj.rotation) pbf.writeFloatField(7, obj.rotation);
};

// State ========================================

var State = self.State = {};

State.read = function (pbf, end) {
    return pbf.readFields(State._readField, {entities: [], bodies: []}, end);
};
State._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.entities.push(Entity.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 2) obj.bodies.push(Body.read(pbf, pbf.readVarint() + pbf.pos));
};
State.write = function (obj, pbf) {
    if (obj.entities) for (var i = 0; i < obj.entities.length; i++) pbf.writeMessage(1, Entity.write, obj.entities[i]);
    if (obj.bodies) for (i = 0; i < obj.bodies.length; i++) pbf.writeMessage(2, Body.write, obj.bodies[i]);
};

// GameInput ========================================

var GameInput = self.GameInput = {};

GameInput.read = function (pbf, end) {
    return pbf.readFields(GameInput._readField, {x: 0, y: 0, pressed: false}, end);
};
GameInput._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.x = pbf.readFloat();
    else if (tag === 2) obj.y = pbf.readFloat();
    else if (tag === 3) obj.pressed = pbf.readBoolean();
};
GameInput.write = function (obj, pbf) {
    if (obj.x) pbf.writeFloatField(1, obj.x);
    if (obj.y) pbf.writeFloatField(2, obj.y);
    if (obj.pressed) pbf.writeBooleanField(3, obj.pressed);
};
